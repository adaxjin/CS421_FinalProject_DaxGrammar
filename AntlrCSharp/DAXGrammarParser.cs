//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\adajin\Workspace\CS421_Project\DaxGrammar\AntlrCSharp\DAXGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class DAXGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PLUS=1, MINUS=2, TIMES=3, DIVIDE=4, POWER=5, ARE_EQUAL=6, GREATER_THAN_EQUALS=7, 
		LESS_THAN_EQUALS=8, NOT_EQUAL=9, EQUALS=10, GREATER_THAN=11, LESS_THAN=12, 
		CONCATENATE=13, LOGICAL_AND=14, LOGICAL_OR=15, LOGICAL_IN=16, OPAREN=17, 
		CPAREN=18, OCURLY=19, CCURLY=20, LIST_SEPARATOR=21, BOOLEAN=22, ORDERING=23, 
		APPROXIMATEDISTINCTCOUNT_SYMBOL=24, AVERAGE_SYMBOL=25, AVERAGEA_SYMBOL=26, 
		AVERAGEX_SYMBOL=27, COUNT_SYMBOL=28, COUNTA_SYMBOL=29, COUNTAX_SYMBOL=30, 
		COUNTBLANK_SYMBOL=31, COUNTROWS_SYMBOL=32, COUNTX_SYMBOL=33, DISTINCTCOUNT_SYMBOL=34, 
		DISTINCTCOUNTNOBLANK_SYMBOL=35, MAX_SYMBOL=36, MAXA_SYMBOL=37, MAXX_SYMBOL=38, 
		MIN_SYMBOL=39, MINA_SYMBOL=40, MINX_SYMBOL=41, PRODUCT_SYMBOL=42, PRODUCTX_SYMBOL=43, 
		SUM_SYMBOL=44, SUMX_SYMBOL=45, COLUMNSTATISTICS_SYMBOL=46, CONTAINS_SYMBOL=47, 
		CONTAINSROW_SYMBOL=48, CONTAINSSTRING_SYMBOL=49, CONTAINSSTRINGEXACT_SYMBOL=50, 
		CUSTOMDATA_SYMBOL=51, HASONEFILTER_SYMBOL=52, HASONEVALUE_SYMBOL=53, ISAFTER_SYMBOL=54, 
		ISBLANK_SYMBOL=55, ISCROSSFILTERED_SYMBOL=56, ISEMPTY_SYMBOL=57, ISERROR_SYMBOL=58, 
		ISEVEN_SYMBOL=59, ISFILTERED_SYMBOL=60, ISINSCOPE_SYMBOL=61, ISLOGICAL_SYMBOL=62, 
		ISNONTEXT_SYMBOL=63, ISNUMBER_SYMBOL=64, ISODD_SYMBOL=65, ISONORAFTER_SYMBOL=66, 
		ISSELECTEDMEASURE_SYMBOL=67, ISSUBTOTAL_SYMBOL=68, ISTEXT_SYMBOL=69, NONVISUAL_SYMBOL=70, 
		SELECTEDMEASURE_SYMBOL=71, SELECTEDMEASUREFORMATSTRING_SYMBOL=72, SELECTEDMEASURENAME_SYMBOL=73, 
		USERCULTURE_SYMBOL=74, USERNAME_SYMBOL=75, USEROBJECTID_SYMBOL=76, USERPRINCIPALNAME_SYMBOL=77, 
		WHITESPACE=78, STRING=79, NUMBER=80, DATETIME=81, DOT=82, CURRENCY=83, 
		IDENTIFIER=84, TRUE=85, FALSE=86, ASC=87, DEC=88, DATA_TYPES=89;
	public const int
		RULE_startRule = 0, RULE_functionCategory = 1, RULE_aggregationFunctions = 2, 
		RULE_informationFunctions = 3, RULE_approximateDistinctionCountFunction = 4, 
		RULE_averageFunction = 5, RULE_averageaFunction = 6, RULE_averagexFunction = 7, 
		RULE_countFunction = 8, RULE_countaFunction = 9, RULE_countaxFunction = 10, 
		RULE_countBlankFunction = 11, RULE_countRowsFunction = 12, RULE_countxFunction = 13, 
		RULE_distinctCountFunction = 14, RULE_distinctCountNoBlankFunction = 15, 
		RULE_maxFunction = 16, RULE_maxaFunction = 17, RULE_maxxFunction = 18, 
		RULE_minFunction = 19, RULE_minaFunction = 20, RULE_minxFunction = 21, 
		RULE_productFunction = 22, RULE_productxFunction = 23, RULE_sumFunction = 24, 
		RULE_sumxFunction = 25, RULE_columnStatisticsFunction = 26, RULE_containsFunction = 27, 
		RULE_containsRowFunction = 28, RULE_containsStringFunction = 29, RULE_containsStringExactFunction = 30, 
		RULE_customDataFunction = 31, RULE_hasOneFilterFunction = 32, RULE_hasOneValueFunction = 33, 
		RULE_isAfterFunction = 34, RULE_isBlankFunction = 35, RULE_isCrossFilteredFunction = 36, 
		RULE_isEmptyFunction = 37, RULE_isErrorFunction = 38, RULE_isEvenFunction = 39, 
		RULE_isFilteredFunction = 40, RULE_isInScopeFunction = 41, RULE_isLogicalFunction = 42, 
		RULE_isNonTextFunction = 43, RULE_isNumberFunction = 44, RULE_isOddFunction = 45, 
		RULE_isOnOrAfterFunction = 46, RULE_isSelectedMeasureFunction = 47, RULE_isSubtotalFunction = 48, 
		RULE_isTextFunction = 49, RULE_nonVisualFunction = 50, RULE_selectedMeasureFunction = 51, 
		RULE_selectedMeasureFormatStringFunction = 52, RULE_selectedMeasureNameFunction = 53, 
		RULE_userCultureFunction = 54, RULE_userNameFunction = 55, RULE_userObjectIDFunction = 56, 
		RULE_userPrincipalNameFunction = 57, RULE_anyColRef = 58, RULE_simpleColRef = 59, 
		RULE_qualifiedColRef = 60, RULE_tableRef = 61, RULE_tableExpr = 62, RULE_exprOverTable = 63, 
		RULE_measureRef = 64, RULE_variant = 65, RULE_sortOrder = 66, RULE_scalarValue = 67, 
		RULE_value = 68, RULE_typeScalar = 69, RULE_withinText = 70, RULE_findText = 71;
	public static readonly string[] ruleNames = {
		"startRule", "functionCategory", "aggregationFunctions", "informationFunctions", 
		"approximateDistinctionCountFunction", "averageFunction", "averageaFunction", 
		"averagexFunction", "countFunction", "countaFunction", "countaxFunction", 
		"countBlankFunction", "countRowsFunction", "countxFunction", "distinctCountFunction", 
		"distinctCountNoBlankFunction", "maxFunction", "maxaFunction", "maxxFunction", 
		"minFunction", "minaFunction", "minxFunction", "productFunction", "productxFunction", 
		"sumFunction", "sumxFunction", "columnStatisticsFunction", "containsFunction", 
		"containsRowFunction", "containsStringFunction", "containsStringExactFunction", 
		"customDataFunction", "hasOneFilterFunction", "hasOneValueFunction", "isAfterFunction", 
		"isBlankFunction", "isCrossFilteredFunction", "isEmptyFunction", "isErrorFunction", 
		"isEvenFunction", "isFilteredFunction", "isInScopeFunction", "isLogicalFunction", 
		"isNonTextFunction", "isNumberFunction", "isOddFunction", "isOnOrAfterFunction", 
		"isSelectedMeasureFunction", "isSubtotalFunction", "isTextFunction", "nonVisualFunction", 
		"selectedMeasureFunction", "selectedMeasureFormatStringFunction", "selectedMeasureNameFunction", 
		"userCultureFunction", "userNameFunction", "userObjectIDFunction", "userPrincipalNameFunction", 
		"anyColRef", "simpleColRef", "qualifiedColRef", "tableRef", "tableExpr", 
		"exprOverTable", "measureRef", "variant", "sortOrder", "scalarValue", 
		"value", "typeScalar", "withinText", "findText"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'^'", "'=='", "'>='", "'<='", "'<>'", 
		"'='", "'>'", "'<'", "'&'", "'&&'", "'||'", "'IN'", "'('", "')'", "'{'", 
		"'}'", "','", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PLUS", "MINUS", "TIMES", "DIVIDE", "POWER", "ARE_EQUAL", "GREATER_THAN_EQUALS", 
		"LESS_THAN_EQUALS", "NOT_EQUAL", "EQUALS", "GREATER_THAN", "LESS_THAN", 
		"CONCATENATE", "LOGICAL_AND", "LOGICAL_OR", "LOGICAL_IN", "OPAREN", "CPAREN", 
		"OCURLY", "CCURLY", "LIST_SEPARATOR", "BOOLEAN", "ORDERING", "APPROXIMATEDISTINCTCOUNT_SYMBOL", 
		"AVERAGE_SYMBOL", "AVERAGEA_SYMBOL", "AVERAGEX_SYMBOL", "COUNT_SYMBOL", 
		"COUNTA_SYMBOL", "COUNTAX_SYMBOL", "COUNTBLANK_SYMBOL", "COUNTROWS_SYMBOL", 
		"COUNTX_SYMBOL", "DISTINCTCOUNT_SYMBOL", "DISTINCTCOUNTNOBLANK_SYMBOL", 
		"MAX_SYMBOL", "MAXA_SYMBOL", "MAXX_SYMBOL", "MIN_SYMBOL", "MINA_SYMBOL", 
		"MINX_SYMBOL", "PRODUCT_SYMBOL", "PRODUCTX_SYMBOL", "SUM_SYMBOL", "SUMX_SYMBOL", 
		"COLUMNSTATISTICS_SYMBOL", "CONTAINS_SYMBOL", "CONTAINSROW_SYMBOL", "CONTAINSSTRING_SYMBOL", 
		"CONTAINSSTRINGEXACT_SYMBOL", "CUSTOMDATA_SYMBOL", "HASONEFILTER_SYMBOL", 
		"HASONEVALUE_SYMBOL", "ISAFTER_SYMBOL", "ISBLANK_SYMBOL", "ISCROSSFILTERED_SYMBOL", 
		"ISEMPTY_SYMBOL", "ISERROR_SYMBOL", "ISEVEN_SYMBOL", "ISFILTERED_SYMBOL", 
		"ISINSCOPE_SYMBOL", "ISLOGICAL_SYMBOL", "ISNONTEXT_SYMBOL", "ISNUMBER_SYMBOL", 
		"ISODD_SYMBOL", "ISONORAFTER_SYMBOL", "ISSELECTEDMEASURE_SYMBOL", "ISSUBTOTAL_SYMBOL", 
		"ISTEXT_SYMBOL", "NONVISUAL_SYMBOL", "SELECTEDMEASURE_SYMBOL", "SELECTEDMEASUREFORMATSTRING_SYMBOL", 
		"SELECTEDMEASURENAME_SYMBOL", "USERCULTURE_SYMBOL", "USERNAME_SYMBOL", 
		"USEROBJECTID_SYMBOL", "USERPRINCIPALNAME_SYMBOL", "WHITESPACE", "STRING", 
		"NUMBER", "DATETIME", "DOT", "CURRENCY", "IDENTIFIER", "TRUE", "FALSE", 
		"ASC", "DEC", "DATA_TYPES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DAXGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DAXGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DAXGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DAXGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCategoryContext functionCategory() {
			return GetRuleContext<FunctionCategoryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DAXGrammarParser.Eof, 0); }
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			functionCategory();
			State = 145;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCategoryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregationFunctionsContext aggregationFunctions() {
			return GetRuleContext<AggregationFunctionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InformationFunctionsContext informationFunctions() {
			return GetRuleContext<InformationFunctionsContext>(0);
		}
		public FunctionCategoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCategory; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCategory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCategoryContext functionCategory() {
		FunctionCategoryContext _localctx = new FunctionCategoryContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionCategory);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case APPROXIMATEDISTINCTCOUNT_SYMBOL:
			case AVERAGE_SYMBOL:
			case AVERAGEA_SYMBOL:
			case AVERAGEX_SYMBOL:
			case COUNT_SYMBOL:
			case COUNTA_SYMBOL:
			case COUNTAX_SYMBOL:
			case COUNTBLANK_SYMBOL:
			case COUNTROWS_SYMBOL:
			case COUNTX_SYMBOL:
			case DISTINCTCOUNT_SYMBOL:
			case DISTINCTCOUNTNOBLANK_SYMBOL:
			case MAX_SYMBOL:
			case MAXA_SYMBOL:
			case MAXX_SYMBOL:
			case MIN_SYMBOL:
			case MINA_SYMBOL:
			case MINX_SYMBOL:
			case PRODUCT_SYMBOL:
			case PRODUCTX_SYMBOL:
			case SUM_SYMBOL:
			case SUMX_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				aggregationFunctions();
				}
				break;
			case COLUMNSTATISTICS_SYMBOL:
			case CONTAINS_SYMBOL:
			case CONTAINSROW_SYMBOL:
			case CONTAINSSTRING_SYMBOL:
			case CONTAINSSTRINGEXACT_SYMBOL:
			case CUSTOMDATA_SYMBOL:
			case HASONEFILTER_SYMBOL:
			case HASONEVALUE_SYMBOL:
			case ISAFTER_SYMBOL:
			case ISBLANK_SYMBOL:
			case ISCROSSFILTERED_SYMBOL:
			case ISEMPTY_SYMBOL:
			case ISERROR_SYMBOL:
			case ISEVEN_SYMBOL:
			case ISFILTERED_SYMBOL:
			case ISINSCOPE_SYMBOL:
			case ISLOGICAL_SYMBOL:
			case ISNONTEXT_SYMBOL:
			case ISNUMBER_SYMBOL:
			case ISODD_SYMBOL:
			case ISONORAFTER_SYMBOL:
			case ISSELECTEDMEASURE_SYMBOL:
			case ISSUBTOTAL_SYMBOL:
			case ISTEXT_SYMBOL:
			case NONVISUAL_SYMBOL:
			case SELECTEDMEASURE_SYMBOL:
			case SELECTEDMEASUREFORMATSTRING_SYMBOL:
			case SELECTEDMEASURENAME_SYMBOL:
			case USERCULTURE_SYMBOL:
			case USERNAME_SYMBOL:
			case USEROBJECTID_SYMBOL:
			case USERPRINCIPALNAME_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				informationFunctions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregationFunctionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ApproximateDistinctionCountFunctionContext approximateDistinctionCountFunction() {
			return GetRuleContext<ApproximateDistinctionCountFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AverageFunctionContext averageFunction() {
			return GetRuleContext<AverageFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AverageaFunctionContext averageaFunction() {
			return GetRuleContext<AverageaFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AveragexFunctionContext averagexFunction() {
			return GetRuleContext<AveragexFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CountFunctionContext countFunction() {
			return GetRuleContext<CountFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CountaFunctionContext countaFunction() {
			return GetRuleContext<CountaFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CountaxFunctionContext countaxFunction() {
			return GetRuleContext<CountaxFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CountBlankFunctionContext countBlankFunction() {
			return GetRuleContext<CountBlankFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CountRowsFunctionContext countRowsFunction() {
			return GetRuleContext<CountRowsFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CountxFunctionContext countxFunction() {
			return GetRuleContext<CountxFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DistinctCountFunctionContext distinctCountFunction() {
			return GetRuleContext<DistinctCountFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DistinctCountNoBlankFunctionContext distinctCountNoBlankFunction() {
			return GetRuleContext<DistinctCountNoBlankFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaxFunctionContext maxFunction() {
			return GetRuleContext<MaxFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaxaFunctionContext maxaFunction() {
			return GetRuleContext<MaxaFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaxxFunctionContext maxxFunction() {
			return GetRuleContext<MaxxFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinFunctionContext minFunction() {
			return GetRuleContext<MinFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinaFunctionContext minaFunction() {
			return GetRuleContext<MinaFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinxFunctionContext minxFunction() {
			return GetRuleContext<MinxFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProductFunctionContext productFunction() {
			return GetRuleContext<ProductFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProductxFunctionContext productxFunction() {
			return GetRuleContext<ProductxFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumFunctionContext sumFunction() {
			return GetRuleContext<SumFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumxFunctionContext sumxFunction() {
			return GetRuleContext<SumxFunctionContext>(0);
		}
		public AggregationFunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregationFunctions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregationFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregationFunctionsContext aggregationFunctions() {
		AggregationFunctionsContext _localctx = new AggregationFunctionsContext(Context, State);
		EnterRule(_localctx, 4, RULE_aggregationFunctions);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case APPROXIMATEDISTINCTCOUNT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				approximateDistinctionCountFunction();
				}
				break;
			case AVERAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				averageFunction();
				}
				break;
			case AVERAGEA_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 153;
				averageaFunction();
				}
				break;
			case AVERAGEX_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 154;
				averagexFunction();
				}
				break;
			case COUNT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 155;
				countFunction();
				}
				break;
			case COUNTA_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 156;
				countaFunction();
				}
				break;
			case COUNTAX_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 157;
				countaxFunction();
				}
				break;
			case COUNTBLANK_SYMBOL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 158;
				countBlankFunction();
				}
				break;
			case COUNTROWS_SYMBOL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 159;
				countRowsFunction();
				}
				break;
			case COUNTX_SYMBOL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 160;
				countxFunction();
				}
				break;
			case DISTINCTCOUNT_SYMBOL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 161;
				distinctCountFunction();
				}
				break;
			case DISTINCTCOUNTNOBLANK_SYMBOL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 162;
				distinctCountNoBlankFunction();
				}
				break;
			case MAX_SYMBOL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 163;
				maxFunction();
				}
				break;
			case MAXA_SYMBOL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 164;
				maxaFunction();
				}
				break;
			case MAXX_SYMBOL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 165;
				maxxFunction();
				}
				break;
			case MIN_SYMBOL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 166;
				minFunction();
				}
				break;
			case MINA_SYMBOL:
				EnterOuterAlt(_localctx, 17);
				{
				State = 167;
				minaFunction();
				}
				break;
			case MINX_SYMBOL:
				EnterOuterAlt(_localctx, 18);
				{
				State = 168;
				minxFunction();
				}
				break;
			case PRODUCT_SYMBOL:
				EnterOuterAlt(_localctx, 19);
				{
				State = 169;
				productFunction();
				}
				break;
			case PRODUCTX_SYMBOL:
				EnterOuterAlt(_localctx, 20);
				{
				State = 170;
				productxFunction();
				}
				break;
			case SUM_SYMBOL:
				EnterOuterAlt(_localctx, 21);
				{
				State = 171;
				sumFunction();
				}
				break;
			case SUMX_SYMBOL:
				EnterOuterAlt(_localctx, 22);
				{
				State = 172;
				sumxFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InformationFunctionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnStatisticsFunctionContext columnStatisticsFunction() {
			return GetRuleContext<ColumnStatisticsFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContainsFunctionContext containsFunction() {
			return GetRuleContext<ContainsFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContainsRowFunctionContext containsRowFunction() {
			return GetRuleContext<ContainsRowFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContainsStringFunctionContext containsStringFunction() {
			return GetRuleContext<ContainsStringFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContainsStringExactFunctionContext containsStringExactFunction() {
			return GetRuleContext<ContainsStringExactFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomDataFunctionContext customDataFunction() {
			return GetRuleContext<CustomDataFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HasOneFilterFunctionContext hasOneFilterFunction() {
			return GetRuleContext<HasOneFilterFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HasOneValueFunctionContext hasOneValueFunction() {
			return GetRuleContext<HasOneValueFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsAfterFunctionContext isAfterFunction() {
			return GetRuleContext<IsAfterFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsBlankFunctionContext isBlankFunction() {
			return GetRuleContext<IsBlankFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsCrossFilteredFunctionContext isCrossFilteredFunction() {
			return GetRuleContext<IsCrossFilteredFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsEmptyFunctionContext isEmptyFunction() {
			return GetRuleContext<IsEmptyFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsErrorFunctionContext isErrorFunction() {
			return GetRuleContext<IsErrorFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsEvenFunctionContext isEvenFunction() {
			return GetRuleContext<IsEvenFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsFilteredFunctionContext isFilteredFunction() {
			return GetRuleContext<IsFilteredFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsInScopeFunctionContext isInScopeFunction() {
			return GetRuleContext<IsInScopeFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsLogicalFunctionContext isLogicalFunction() {
			return GetRuleContext<IsLogicalFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsNonTextFunctionContext isNonTextFunction() {
			return GetRuleContext<IsNonTextFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsNumberFunctionContext isNumberFunction() {
			return GetRuleContext<IsNumberFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsOddFunctionContext isOddFunction() {
			return GetRuleContext<IsOddFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsOnOrAfterFunctionContext isOnOrAfterFunction() {
			return GetRuleContext<IsOnOrAfterFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsSelectedMeasureFunctionContext isSelectedMeasureFunction() {
			return GetRuleContext<IsSelectedMeasureFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsSubtotalFunctionContext isSubtotalFunction() {
			return GetRuleContext<IsSubtotalFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsTextFunctionContext isTextFunction() {
			return GetRuleContext<IsTextFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonVisualFunctionContext nonVisualFunction() {
			return GetRuleContext<NonVisualFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectedMeasureFunctionContext selectedMeasureFunction() {
			return GetRuleContext<SelectedMeasureFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectedMeasureFormatStringFunctionContext selectedMeasureFormatStringFunction() {
			return GetRuleContext<SelectedMeasureFormatStringFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectedMeasureNameFunctionContext selectedMeasureNameFunction() {
			return GetRuleContext<SelectedMeasureNameFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserCultureFunctionContext userCultureFunction() {
			return GetRuleContext<UserCultureFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameFunctionContext userNameFunction() {
			return GetRuleContext<UserNameFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserObjectIDFunctionContext userObjectIDFunction() {
			return GetRuleContext<UserObjectIDFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPrincipalNameFunctionContext userPrincipalNameFunction() {
			return GetRuleContext<UserPrincipalNameFunctionContext>(0);
		}
		public InformationFunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_informationFunctions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInformationFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InformationFunctionsContext informationFunctions() {
		InformationFunctionsContext _localctx = new InformationFunctionsContext(Context, State);
		EnterRule(_localctx, 6, RULE_informationFunctions);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLUMNSTATISTICS_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				columnStatisticsFunction();
				}
				break;
			case CONTAINS_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				containsFunction();
				}
				break;
			case CONTAINSROW_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				containsRowFunction();
				}
				break;
			case CONTAINSSTRING_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 178;
				containsStringFunction();
				}
				break;
			case CONTAINSSTRINGEXACT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 179;
				containsStringExactFunction();
				}
				break;
			case CUSTOMDATA_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 180;
				customDataFunction();
				}
				break;
			case HASONEFILTER_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 181;
				hasOneFilterFunction();
				}
				break;
			case HASONEVALUE_SYMBOL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 182;
				hasOneValueFunction();
				}
				break;
			case ISAFTER_SYMBOL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 183;
				isAfterFunction();
				}
				break;
			case ISBLANK_SYMBOL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 184;
				isBlankFunction();
				}
				break;
			case ISCROSSFILTERED_SYMBOL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 185;
				isCrossFilteredFunction();
				}
				break;
			case ISEMPTY_SYMBOL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 186;
				isEmptyFunction();
				}
				break;
			case ISERROR_SYMBOL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 187;
				isErrorFunction();
				}
				break;
			case ISEVEN_SYMBOL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 188;
				isEvenFunction();
				}
				break;
			case ISFILTERED_SYMBOL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 189;
				isFilteredFunction();
				}
				break;
			case ISINSCOPE_SYMBOL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 190;
				isInScopeFunction();
				}
				break;
			case ISLOGICAL_SYMBOL:
				EnterOuterAlt(_localctx, 17);
				{
				State = 191;
				isLogicalFunction();
				}
				break;
			case ISNONTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 18);
				{
				State = 192;
				isNonTextFunction();
				}
				break;
			case ISNUMBER_SYMBOL:
				EnterOuterAlt(_localctx, 19);
				{
				State = 193;
				isNumberFunction();
				}
				break;
			case ISODD_SYMBOL:
				EnterOuterAlt(_localctx, 20);
				{
				State = 194;
				isOddFunction();
				}
				break;
			case ISONORAFTER_SYMBOL:
				EnterOuterAlt(_localctx, 21);
				{
				State = 195;
				isOnOrAfterFunction();
				}
				break;
			case ISSELECTEDMEASURE_SYMBOL:
				EnterOuterAlt(_localctx, 22);
				{
				State = 196;
				isSelectedMeasureFunction();
				}
				break;
			case ISSUBTOTAL_SYMBOL:
				EnterOuterAlt(_localctx, 23);
				{
				State = 197;
				isSubtotalFunction();
				}
				break;
			case ISTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 24);
				{
				State = 198;
				isTextFunction();
				}
				break;
			case NONVISUAL_SYMBOL:
				EnterOuterAlt(_localctx, 25);
				{
				State = 199;
				nonVisualFunction();
				}
				break;
			case SELECTEDMEASURE_SYMBOL:
				EnterOuterAlt(_localctx, 26);
				{
				State = 200;
				selectedMeasureFunction();
				}
				break;
			case SELECTEDMEASUREFORMATSTRING_SYMBOL:
				EnterOuterAlt(_localctx, 27);
				{
				State = 201;
				selectedMeasureFormatStringFunction();
				}
				break;
			case SELECTEDMEASURENAME_SYMBOL:
				EnterOuterAlt(_localctx, 28);
				{
				State = 202;
				selectedMeasureNameFunction();
				}
				break;
			case USERCULTURE_SYMBOL:
				EnterOuterAlt(_localctx, 29);
				{
				State = 203;
				userCultureFunction();
				}
				break;
			case USERNAME_SYMBOL:
				EnterOuterAlt(_localctx, 30);
				{
				State = 204;
				userNameFunction();
				}
				break;
			case USEROBJECTID_SYMBOL:
				EnterOuterAlt(_localctx, 31);
				{
				State = 205;
				userObjectIDFunction();
				}
				break;
			case USERPRINCIPALNAME_SYMBOL:
				EnterOuterAlt(_localctx, 32);
				{
				State = 206;
				userPrincipalNameFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApproximateDistinctionCountFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPROXIMATEDISTINCTCOUNT_SYMBOL() { return GetToken(DAXGrammarParser.APPROXIMATEDISTINCTCOUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public ApproximateDistinctionCountFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_approximateDistinctionCountFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApproximateDistinctionCountFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ApproximateDistinctionCountFunctionContext approximateDistinctionCountFunction() {
		ApproximateDistinctionCountFunctionContext _localctx = new ApproximateDistinctionCountFunctionContext(Context, State);
		EnterRule(_localctx, 8, RULE_approximateDistinctionCountFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(APPROXIMATEDISTINCTCOUNT_SYMBOL);
			State = 210;
			Match(OPAREN);
			State = 211;
			anyColRef();
			State = 212;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AverageFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVERAGE_SYMBOL() { return GetToken(DAXGrammarParser.AVERAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public AverageFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_averageFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AverageFunctionContext averageFunction() {
		AverageFunctionContext _localctx = new AverageFunctionContext(Context, State);
		EnterRule(_localctx, 10, RULE_averageFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(AVERAGE_SYMBOL);
			State = 215;
			Match(OPAREN);
			State = 216;
			anyColRef();
			State = 217;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AverageaFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVERAGEA_SYMBOL() { return GetToken(DAXGrammarParser.AVERAGEA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public AverageaFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_averageaFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageaFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AverageaFunctionContext averageaFunction() {
		AverageaFunctionContext _localctx = new AverageaFunctionContext(Context, State);
		EnterRule(_localctx, 12, RULE_averageaFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(AVERAGEA_SYMBOL);
			State = 220;
			Match(OPAREN);
			State = 221;
			anyColRef();
			State = 222;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AveragexFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVERAGEX_SYMBOL() { return GetToken(DAXGrammarParser.AVERAGEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR() { return GetToken(DAXGrammarParser.LIST_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprOverTableContext exprOverTable() {
			return GetRuleContext<ExprOverTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public AveragexFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_averagexFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAveragexFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AveragexFunctionContext averagexFunction() {
		AveragexFunctionContext _localctx = new AveragexFunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_averagexFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(AVERAGEX_SYMBOL);
			State = 225;
			Match(OPAREN);
			State = 226;
			tableExpr();
			State = 227;
			Match(LIST_SEPARATOR);
			State = 228;
			exprOverTable();
			State = 229;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_SYMBOL() { return GetToken(DAXGrammarParser.COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public CountFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_countFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountFunctionContext countFunction() {
		CountFunctionContext _localctx = new CountFunctionContext(Context, State);
		EnterRule(_localctx, 16, RULE_countFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(COUNT_SYMBOL);
			State = 232;
			Match(OPAREN);
			State = 233;
			anyColRef();
			State = 234;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountaFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTA_SYMBOL() { return GetToken(DAXGrammarParser.COUNTA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public CountaFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_countaFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountaFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountaFunctionContext countaFunction() {
		CountaFunctionContext _localctx = new CountaFunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_countaFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(COUNTA_SYMBOL);
			State = 237;
			Match(OPAREN);
			State = 238;
			anyColRef();
			State = 239;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountaxFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTAX_SYMBOL() { return GetToken(DAXGrammarParser.COUNTAX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR() { return GetToken(DAXGrammarParser.LIST_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprOverTableContext exprOverTable() {
			return GetRuleContext<ExprOverTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public CountaxFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_countaxFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountaxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountaxFunctionContext countaxFunction() {
		CountaxFunctionContext _localctx = new CountaxFunctionContext(Context, State);
		EnterRule(_localctx, 20, RULE_countaxFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(COUNTAX_SYMBOL);
			State = 242;
			Match(OPAREN);
			State = 243;
			tableExpr();
			State = 244;
			Match(LIST_SEPARATOR);
			State = 245;
			exprOverTable();
			State = 246;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountBlankFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTBLANK_SYMBOL() { return GetToken(DAXGrammarParser.COUNTBLANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public CountBlankFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_countBlankFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountBlankFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountBlankFunctionContext countBlankFunction() {
		CountBlankFunctionContext _localctx = new CountBlankFunctionContext(Context, State);
		EnterRule(_localctx, 22, RULE_countBlankFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(COUNTBLANK_SYMBOL);
			State = 249;
			Match(OPAREN);
			State = 250;
			anyColRef();
			State = 251;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountRowsFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTROWS_SYMBOL() { return GetToken(DAXGrammarParser.COUNTROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		public CountRowsFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_countRowsFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountRowsFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountRowsFunctionContext countRowsFunction() {
		CountRowsFunctionContext _localctx = new CountRowsFunctionContext(Context, State);
		EnterRule(_localctx, 24, RULE_countRowsFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(COUNTROWS_SYMBOL);
			State = 254;
			Match(OPAREN);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 255;
				tableExpr();
				}
			}

			State = 258;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountxFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTX_SYMBOL() { return GetToken(DAXGrammarParser.COUNTX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR() { return GetToken(DAXGrammarParser.LIST_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprOverTableContext exprOverTable() {
			return GetRuleContext<ExprOverTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public CountxFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_countxFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountxFunctionContext countxFunction() {
		CountxFunctionContext _localctx = new CountxFunctionContext(Context, State);
		EnterRule(_localctx, 26, RULE_countxFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(COUNTX_SYMBOL);
			State = 261;
			Match(OPAREN);
			State = 262;
			tableExpr();
			State = 263;
			Match(LIST_SEPARATOR);
			State = 264;
			exprOverTable();
			State = 265;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistinctCountFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCTCOUNT_SYMBOL() { return GetToken(DAXGrammarParser.DISTINCTCOUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public DistinctCountFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distinctCountFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistinctCountFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistinctCountFunctionContext distinctCountFunction() {
		DistinctCountFunctionContext _localctx = new DistinctCountFunctionContext(Context, State);
		EnterRule(_localctx, 28, RULE_distinctCountFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(DISTINCTCOUNT_SYMBOL);
			State = 268;
			Match(OPAREN);
			State = 269;
			anyColRef();
			State = 270;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistinctCountNoBlankFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCTCOUNTNOBLANK_SYMBOL() { return GetToken(DAXGrammarParser.DISTINCTCOUNTNOBLANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public DistinctCountNoBlankFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distinctCountNoBlankFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistinctCountNoBlankFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistinctCountNoBlankFunctionContext distinctCountNoBlankFunction() {
		DistinctCountNoBlankFunctionContext _localctx = new DistinctCountNoBlankFunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_distinctCountNoBlankFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(DISTINCTCOUNTNOBLANK_SYMBOL);
			State = 273;
			Match(OPAREN);
			State = 274;
			anyColRef();
			State = 275;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SYMBOL() { return GetToken(DAXGrammarParser.MAX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeScalarContext typeScalar() {
			return GetRuleContext<TypeScalarContext>(0);
		}
		public MaxFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxFunctionContext maxFunction() {
		MaxFunctionContext _localctx = new MaxFunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_maxFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(MAX_SYMBOL);
			State = 278;
			Match(OPAREN);
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 279;
				anyColRef();
				}
				break;
			case 2:
				{
				State = 280;
				typeScalar();
				}
				break;
			}
			State = 283;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxaFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXA_SYMBOL() { return GetToken(DAXGrammarParser.MAXA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public MaxaFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxaFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxaFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxaFunctionContext maxaFunction() {
		MaxaFunctionContext _localctx = new MaxaFunctionContext(Context, State);
		EnterRule(_localctx, 34, RULE_maxaFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(MAXA_SYMBOL);
			State = 286;
			Match(OPAREN);
			State = 287;
			anyColRef();
			State = 288;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxxFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXX_SYMBOL() { return GetToken(DAXGrammarParser.MAXX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(DAXGrammarParser.LIST_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(DAXGrammarParser.LIST_SEPARATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprOverTableContext exprOverTable() {
			return GetRuleContext<ExprOverTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantContext variant() {
			return GetRuleContext<VariantContext>(0);
		}
		public MaxxFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxxFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxxFunctionContext maxxFunction() {
		MaxxFunctionContext _localctx = new MaxxFunctionContext(Context, State);
		EnterRule(_localctx, 36, RULE_maxxFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(MAXX_SYMBOL);
			State = 291;
			Match(OPAREN);
			State = 292;
			tableExpr();
			State = 293;
			Match(LIST_SEPARATOR);
			State = 294;
			exprOverTable();
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIST_SEPARATOR) {
				{
				State = 295;
				Match(LIST_SEPARATOR);
				State = 296;
				variant();
				}
			}

			State = 299;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_SYMBOL() { return GetToken(DAXGrammarParser.MIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeScalarContext typeScalar() {
			return GetRuleContext<TypeScalarContext>(0);
		}
		public MinFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinFunctionContext minFunction() {
		MinFunctionContext _localctx = new MinFunctionContext(Context, State);
		EnterRule(_localctx, 38, RULE_minFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(MIN_SYMBOL);
			State = 302;
			Match(OPAREN);
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 303;
				anyColRef();
				}
				break;
			case 2:
				{
				State = 304;
				typeScalar();
				}
				break;
			}
			State = 307;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinaFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINA_SYMBOL() { return GetToken(DAXGrammarParser.MINA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public MinaFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minaFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinaFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinaFunctionContext minaFunction() {
		MinaFunctionContext _localctx = new MinaFunctionContext(Context, State);
		EnterRule(_localctx, 40, RULE_minaFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(MINA_SYMBOL);
			State = 310;
			Match(OPAREN);
			State = 311;
			anyColRef();
			State = 312;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinxFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINX_SYMBOL() { return GetToken(DAXGrammarParser.MINX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(DAXGrammarParser.LIST_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(DAXGrammarParser.LIST_SEPARATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprOverTableContext exprOverTable() {
			return GetRuleContext<ExprOverTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantContext variant() {
			return GetRuleContext<VariantContext>(0);
		}
		public MinxFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minxFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinxFunctionContext minxFunction() {
		MinxFunctionContext _localctx = new MinxFunctionContext(Context, State);
		EnterRule(_localctx, 42, RULE_minxFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(MINX_SYMBOL);
			State = 315;
			Match(OPAREN);
			State = 316;
			tableExpr();
			State = 317;
			Match(LIST_SEPARATOR);
			State = 318;
			exprOverTable();
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIST_SEPARATOR) {
				{
				State = 319;
				Match(LIST_SEPARATOR);
				State = 320;
				variant();
				}
			}

			State = 323;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRODUCT_SYMBOL() { return GetToken(DAXGrammarParser.PRODUCT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public ProductFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_productFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProductFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProductFunctionContext productFunction() {
		ProductFunctionContext _localctx = new ProductFunctionContext(Context, State);
		EnterRule(_localctx, 44, RULE_productFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(PRODUCT_SYMBOL);
			State = 326;
			Match(OPAREN);
			State = 327;
			anyColRef();
			State = 328;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductxFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRODUCTX_SYMBOL() { return GetToken(DAXGrammarParser.PRODUCTX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR() { return GetToken(DAXGrammarParser.LIST_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprOverTableContext exprOverTable() {
			return GetRuleContext<ExprOverTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public ProductxFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_productxFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProductxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProductxFunctionContext productxFunction() {
		ProductxFunctionContext _localctx = new ProductxFunctionContext(Context, State);
		EnterRule(_localctx, 46, RULE_productxFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(PRODUCTX_SYMBOL);
			State = 331;
			Match(OPAREN);
			State = 332;
			tableExpr();
			State = 333;
			Match(LIST_SEPARATOR);
			State = 334;
			exprOverTable();
			State = 335;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM_SYMBOL() { return GetToken(DAXGrammarParser.SUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public SumFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumFunctionContext sumFunction() {
		SumFunctionContext _localctx = new SumFunctionContext(Context, State);
		EnterRule(_localctx, 48, RULE_sumFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(SUM_SYMBOL);
			State = 338;
			Match(OPAREN);
			State = 339;
			anyColRef();
			State = 340;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumxFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUMX_SYMBOL() { return GetToken(DAXGrammarParser.SUMX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR() { return GetToken(DAXGrammarParser.LIST_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprOverTableContext exprOverTable() {
			return GetRuleContext<ExprOverTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public SumxFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumxFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumxFunctionContext sumxFunction() {
		SumxFunctionContext _localctx = new SumxFunctionContext(Context, State);
		EnterRule(_localctx, 50, RULE_sumxFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(SUMX_SYMBOL);
			State = 343;
			Match(OPAREN);
			State = 344;
			tableExpr();
			State = 345;
			Match(LIST_SEPARATOR);
			State = 346;
			exprOverTable();
			State = 347;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnStatisticsFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNSTATISTICS_SYMBOL() { return GetToken(DAXGrammarParser.COLUMNSTATISTICS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public ColumnStatisticsFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnStatisticsFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnStatisticsFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnStatisticsFunctionContext columnStatisticsFunction() {
		ColumnStatisticsFunctionContext _localctx = new ColumnStatisticsFunctionContext(Context, State);
		EnterRule(_localctx, 52, RULE_columnStatisticsFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			Match(COLUMNSTATISTICS_SYMBOL);
			State = 350;
			Match(OPAREN);
			State = 351;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainsFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS_SYMBOL() { return GetToken(DAXGrammarParser.CONTAINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(DAXGrammarParser.LIST_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(DAXGrammarParser.LIST_SEPARATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext[] anyColRef() {
			return GetRuleContexts<AnyColRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef(int i) {
			return GetRuleContext<AnyColRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScalarValueContext[] scalarValue() {
			return GetRuleContexts<ScalarValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScalarValueContext scalarValue(int i) {
			return GetRuleContext<ScalarValueContext>(i);
		}
		public ContainsFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containsFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainsFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainsFunctionContext containsFunction() {
		ContainsFunctionContext _localctx = new ContainsFunctionContext(Context, State);
		EnterRule(_localctx, 54, RULE_containsFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(CONTAINS_SYMBOL);
			State = 354;
			Match(OPAREN);
			State = 355;
			tableExpr();
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 356;
				Match(LIST_SEPARATOR);
				State = 357;
				anyColRef();
				State = 358;
				Match(LIST_SEPARATOR);
				State = 359;
				scalarValue();
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LIST_SEPARATOR );
			State = 365;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainsRowFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINSROW_SYMBOL() { return GetToken(DAXGrammarParser.CONTAINSROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(DAXGrammarParser.LIST_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(DAXGrammarParser.LIST_SEPARATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScalarValueContext[] scalarValue() {
			return GetRuleContexts<ScalarValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScalarValueContext scalarValue(int i) {
			return GetRuleContext<ScalarValueContext>(i);
		}
		public ContainsRowFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containsRowFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainsRowFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainsRowFunctionContext containsRowFunction() {
		ContainsRowFunctionContext _localctx = new ContainsRowFunctionContext(Context, State);
		EnterRule(_localctx, 56, RULE_containsRowFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(CONTAINSROW_SYMBOL);
			State = 368;
			Match(OPAREN);
			State = 369;
			tableExpr();
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 370;
				Match(LIST_SEPARATOR);
				State = 371;
				scalarValue();
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LIST_SEPARATOR );
			State = 376;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainsStringFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINSSTRING_SYMBOL() { return GetToken(DAXGrammarParser.CONTAINSSTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithinTextContext withinText() {
			return GetRuleContext<WithinTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR() { return GetToken(DAXGrammarParser.LIST_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FindTextContext findText() {
			return GetRuleContext<FindTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public ContainsStringFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containsStringFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainsStringFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainsStringFunctionContext containsStringFunction() {
		ContainsStringFunctionContext _localctx = new ContainsStringFunctionContext(Context, State);
		EnterRule(_localctx, 58, RULE_containsStringFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(CONTAINSSTRING_SYMBOL);
			State = 379;
			Match(OPAREN);
			State = 380;
			withinText();
			State = 381;
			Match(LIST_SEPARATOR);
			State = 382;
			findText();
			State = 383;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainsStringExactFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINSSTRINGEXACT_SYMBOL() { return GetToken(DAXGrammarParser.CONTAINSSTRINGEXACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithinTextContext withinText() {
			return GetRuleContext<WithinTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR() { return GetToken(DAXGrammarParser.LIST_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FindTextContext findText() {
			return GetRuleContext<FindTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public ContainsStringExactFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containsStringExactFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainsStringExactFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainsStringExactFunctionContext containsStringExactFunction() {
		ContainsStringExactFunctionContext _localctx = new ContainsStringExactFunctionContext(Context, State);
		EnterRule(_localctx, 60, RULE_containsStringExactFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(CONTAINSSTRINGEXACT_SYMBOL);
			State = 386;
			Match(OPAREN);
			State = 387;
			withinText();
			State = 388;
			Match(LIST_SEPARATOR);
			State = 389;
			findText();
			State = 390;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomDataFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUSTOMDATA_SYMBOL() { return GetToken(DAXGrammarParser.CUSTOMDATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public CustomDataFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customDataFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomDataFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomDataFunctionContext customDataFunction() {
		CustomDataFunctionContext _localctx = new CustomDataFunctionContext(Context, State);
		EnterRule(_localctx, 62, RULE_customDataFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(CUSTOMDATA_SYMBOL);
			State = 393;
			Match(OPAREN);
			State = 394;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HasOneFilterFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASONEFILTER_SYMBOL() { return GetToken(DAXGrammarParser.HASONEFILTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public HasOneFilterFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hasOneFilterFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasOneFilterFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HasOneFilterFunctionContext hasOneFilterFunction() {
		HasOneFilterFunctionContext _localctx = new HasOneFilterFunctionContext(Context, State);
		EnterRule(_localctx, 64, RULE_hasOneFilterFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(HASONEFILTER_SYMBOL);
			State = 397;
			Match(OPAREN);
			State = 398;
			anyColRef();
			State = 399;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HasOneValueFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASONEVALUE_SYMBOL() { return GetToken(DAXGrammarParser.HASONEVALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedColRefContext qualifiedColRef() {
			return GetRuleContext<QualifiedColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public HasOneValueFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hasOneValueFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasOneValueFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HasOneValueFunctionContext hasOneValueFunction() {
		HasOneValueFunctionContext _localctx = new HasOneValueFunctionContext(Context, State);
		EnterRule(_localctx, 66, RULE_hasOneValueFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(HASONEVALUE_SYMBOL);
			State = 402;
			Match(OPAREN);
			State = 403;
			qualifiedColRef();
			State = 404;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsAfterFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAFTER_SYMBOL() { return GetToken(DAXGrammarParser.ISAFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScalarValueContext[] scalarValue() {
			return GetRuleContexts<ScalarValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScalarValueContext scalarValue(int i) {
			return GetRuleContext<ScalarValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(DAXGrammarParser.LIST_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(DAXGrammarParser.LIST_SEPARATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortOrderContext[] sortOrder() {
			return GetRuleContexts<SortOrderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortOrderContext sortOrder(int i) {
			return GetRuleContext<SortOrderContext>(i);
		}
		public IsAfterFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isAfterFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsAfterFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsAfterFunctionContext isAfterFunction() {
		IsAfterFunctionContext _localctx = new IsAfterFunctionContext(Context, State);
		EnterRule(_localctx, 68, RULE_isAfterFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(ISAFTER_SYMBOL);
			State = 407;
			Match(OPAREN);
			State = 408;
			scalarValue();
			State = 409;
			Match(LIST_SEPARATOR);
			State = 410;
			scalarValue();
			State = 413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 411;
				Match(LIST_SEPARATOR);
				State = 412;
				sortOrder();
				}
				break;
			}
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LIST_SEPARATOR) {
				{
				{
				State = 415;
				Match(LIST_SEPARATOR);
				State = 416;
				scalarValue();
				State = 417;
				Match(LIST_SEPARATOR);
				State = 418;
				scalarValue();
				State = 421;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 419;
					Match(LIST_SEPARATOR);
					State = 420;
					sortOrder();
					}
					break;
				}
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 428;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsBlankFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISBLANK_SYMBOL() { return GetToken(DAXGrammarParser.ISBLANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public IsBlankFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isBlankFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsBlankFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsBlankFunctionContext isBlankFunction() {
		IsBlankFunctionContext _localctx = new IsBlankFunctionContext(Context, State);
		EnterRule(_localctx, 70, RULE_isBlankFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(ISBLANK_SYMBOL);
			State = 431;
			Match(OPAREN);
			State = 432;
			value();
			State = 433;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCrossFilteredFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISCROSSFILTERED_SYMBOL() { return GetToken(DAXGrammarParser.ISCROSSFILTERED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		public IsCrossFilteredFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCrossFilteredFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCrossFilteredFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCrossFilteredFunctionContext isCrossFilteredFunction() {
		IsCrossFilteredFunctionContext _localctx = new IsCrossFilteredFunctionContext(Context, State);
		EnterRule(_localctx, 72, RULE_isCrossFilteredFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(ISCROSSFILTERED_SYMBOL);
			State = 436;
			Match(OPAREN);
			State = 439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 437;
				tableRef();
				}
				break;
			case 2:
				{
				State = 438;
				anyColRef();
				}
				break;
			}
			State = 441;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsEmptyFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISEMPTY_SYMBOL() { return GetToken(DAXGrammarParser.ISEMPTY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public IsEmptyFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isEmptyFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsEmptyFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsEmptyFunctionContext isEmptyFunction() {
		IsEmptyFunctionContext _localctx = new IsEmptyFunctionContext(Context, State);
		EnterRule(_localctx, 74, RULE_isEmptyFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(ISEMPTY_SYMBOL);
			State = 444;
			Match(OPAREN);
			State = 445;
			tableExpr();
			State = 446;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsErrorFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISERROR_SYMBOL() { return GetToken(DAXGrammarParser.ISERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public IsErrorFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isErrorFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsErrorFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsErrorFunctionContext isErrorFunction() {
		IsErrorFunctionContext _localctx = new IsErrorFunctionContext(Context, State);
		EnterRule(_localctx, 76, RULE_isErrorFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(ISERROR_SYMBOL);
			State = 449;
			Match(OPAREN);
			State = 450;
			value();
			State = 451;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsEvenFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISEVEN_SYMBOL() { return GetToken(DAXGrammarParser.ISEVEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public IsEvenFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isEvenFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsEvenFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsEvenFunctionContext isEvenFunction() {
		IsEvenFunctionContext _localctx = new IsEvenFunctionContext(Context, State);
		EnterRule(_localctx, 78, RULE_isEvenFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(ISEVEN_SYMBOL);
			State = 454;
			Match(OPAREN);
			State = 455;
			value();
			State = 456;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFilteredFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISFILTERED_SYMBOL() { return GetToken(DAXGrammarParser.ISFILTERED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		public IsFilteredFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFilteredFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFilteredFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFilteredFunctionContext isFilteredFunction() {
		IsFilteredFunctionContext _localctx = new IsFilteredFunctionContext(Context, State);
		EnterRule(_localctx, 80, RULE_isFilteredFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(ISFILTERED_SYMBOL);
			State = 459;
			Match(OPAREN);
			State = 462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 460;
				tableRef();
				}
				break;
			case 2:
				{
				State = 461;
				anyColRef();
				}
				break;
			}
			State = 464;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsInScopeFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISINSCOPE_SYMBOL() { return GetToken(DAXGrammarParser.ISINSCOPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public IsInScopeFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isInScopeFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsInScopeFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsInScopeFunctionContext isInScopeFunction() {
		IsInScopeFunctionContext _localctx = new IsInScopeFunctionContext(Context, State);
		EnterRule(_localctx, 82, RULE_isInScopeFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(ISINSCOPE_SYMBOL);
			State = 467;
			Match(OPAREN);
			State = 468;
			anyColRef();
			State = 469;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsLogicalFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISLOGICAL_SYMBOL() { return GetToken(DAXGrammarParser.ISLOGICAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public IsLogicalFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isLogicalFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsLogicalFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsLogicalFunctionContext isLogicalFunction() {
		IsLogicalFunctionContext _localctx = new IsLogicalFunctionContext(Context, State);
		EnterRule(_localctx, 84, RULE_isLogicalFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			Match(ISLOGICAL_SYMBOL);
			State = 472;
			Match(OPAREN);
			State = 473;
			value();
			State = 474;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsNonTextFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNONTEXT_SYMBOL() { return GetToken(DAXGrammarParser.ISNONTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public IsNonTextFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isNonTextFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNonTextFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsNonTextFunctionContext isNonTextFunction() {
		IsNonTextFunctionContext _localctx = new IsNonTextFunctionContext(Context, State);
		EnterRule(_localctx, 86, RULE_isNonTextFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			Match(ISNONTEXT_SYMBOL);
			State = 477;
			Match(OPAREN);
			State = 478;
			value();
			State = 479;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsNumberFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNUMBER_SYMBOL() { return GetToken(DAXGrammarParser.ISNUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public IsNumberFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isNumberFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNumberFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsNumberFunctionContext isNumberFunction() {
		IsNumberFunctionContext _localctx = new IsNumberFunctionContext(Context, State);
		EnterRule(_localctx, 88, RULE_isNumberFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			Match(ISNUMBER_SYMBOL);
			State = 482;
			Match(OPAREN);
			State = 483;
			value();
			State = 484;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOddFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISODD_SYMBOL() { return GetToken(DAXGrammarParser.ISODD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public IsOddFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOddFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOddFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOddFunctionContext isOddFunction() {
		IsOddFunctionContext _localctx = new IsOddFunctionContext(Context, State);
		EnterRule(_localctx, 90, RULE_isOddFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(ISODD_SYMBOL);
			State = 487;
			Match(OPAREN);
			State = 488;
			value();
			State = 489;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOnOrAfterFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISONORAFTER_SYMBOL() { return GetToken(DAXGrammarParser.ISONORAFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScalarValueContext[] scalarValue() {
			return GetRuleContexts<ScalarValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScalarValueContext scalarValue(int i) {
			return GetRuleContext<ScalarValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(DAXGrammarParser.LIST_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(DAXGrammarParser.LIST_SEPARATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortOrderContext[] sortOrder() {
			return GetRuleContexts<SortOrderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortOrderContext sortOrder(int i) {
			return GetRuleContext<SortOrderContext>(i);
		}
		public IsOnOrAfterFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOnOrAfterFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOnOrAfterFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOnOrAfterFunctionContext isOnOrAfterFunction() {
		IsOnOrAfterFunctionContext _localctx = new IsOnOrAfterFunctionContext(Context, State);
		EnterRule(_localctx, 92, RULE_isOnOrAfterFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(ISONORAFTER_SYMBOL);
			State = 492;
			Match(OPAREN);
			State = 493;
			scalarValue();
			State = 494;
			Match(LIST_SEPARATOR);
			State = 495;
			scalarValue();
			State = 498;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 496;
				Match(LIST_SEPARATOR);
				State = 497;
				sortOrder();
				}
				break;
			}
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LIST_SEPARATOR) {
				{
				{
				State = 500;
				Match(LIST_SEPARATOR);
				State = 501;
				scalarValue();
				State = 502;
				Match(LIST_SEPARATOR);
				State = 503;
				scalarValue();
				State = 506;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 504;
					Match(LIST_SEPARATOR);
					State = 505;
					sortOrder();
					}
					break;
				}
				}
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 513;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsSelectedMeasureFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSELECTEDMEASURE_SYMBOL() { return GetToken(DAXGrammarParser.ISSELECTEDMEASURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MeasureRefContext[] measureRef() {
			return GetRuleContexts<MeasureRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MeasureRefContext measureRef(int i) {
			return GetRuleContext<MeasureRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(DAXGrammarParser.LIST_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(DAXGrammarParser.LIST_SEPARATOR, i);
		}
		public IsSelectedMeasureFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isSelectedMeasureFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsSelectedMeasureFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsSelectedMeasureFunctionContext isSelectedMeasureFunction() {
		IsSelectedMeasureFunctionContext _localctx = new IsSelectedMeasureFunctionContext(Context, State);
		EnterRule(_localctx, 94, RULE_isSelectedMeasureFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(ISSELECTEDMEASURE_SYMBOL);
			State = 516;
			Match(OPAREN);
			State = 517;
			measureRef();
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LIST_SEPARATOR) {
				{
				{
				State = 518;
				Match(LIST_SEPARATOR);
				State = 519;
				measureRef();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 525;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsSubtotalFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUBTOTAL_SYMBOL() { return GetToken(DAXGrammarParser.ISSUBTOTAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyColRefContext anyColRef() {
			return GetRuleContext<AnyColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public IsSubtotalFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isSubtotalFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsSubtotalFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsSubtotalFunctionContext isSubtotalFunction() {
		IsSubtotalFunctionContext _localctx = new IsSubtotalFunctionContext(Context, State);
		EnterRule(_localctx, 96, RULE_isSubtotalFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(ISSUBTOTAL_SYMBOL);
			State = 528;
			Match(OPAREN);
			State = 529;
			anyColRef();
			State = 530;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTextFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISTEXT_SYMBOL() { return GetToken(DAXGrammarParser.ISTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public IsTextFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTextFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTextFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTextFunctionContext isTextFunction() {
		IsTextFunctionContext _localctx = new IsTextFunctionContext(Context, State);
		EnterRule(_localctx, 98, RULE_isTextFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			Match(ISTEXT_SYMBOL);
			State = 533;
			Match(OPAREN);
			State = 534;
			value();
			State = 535;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonVisualFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONVISUAL_SYMBOL() { return GetToken(DAXGrammarParser.NONVISUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableExprContext tableExpr() {
			return GetRuleContext<TableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public NonVisualFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonVisualFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonVisualFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonVisualFunctionContext nonVisualFunction() {
		NonVisualFunctionContext _localctx = new NonVisualFunctionContext(Context, State);
		EnterRule(_localctx, 100, RULE_nonVisualFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(NONVISUAL_SYMBOL);
			State = 538;
			Match(OPAREN);
			State = 539;
			tableExpr();
			State = 540;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectedMeasureFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTEDMEASURE_SYMBOL() { return GetToken(DAXGrammarParser.SELECTEDMEASURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public SelectedMeasureFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectedMeasureFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectedMeasureFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectedMeasureFunctionContext selectedMeasureFunction() {
		SelectedMeasureFunctionContext _localctx = new SelectedMeasureFunctionContext(Context, State);
		EnterRule(_localctx, 102, RULE_selectedMeasureFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(SELECTEDMEASURE_SYMBOL);
			State = 543;
			Match(OPAREN);
			State = 544;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectedMeasureFormatStringFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTEDMEASUREFORMATSTRING_SYMBOL() { return GetToken(DAXGrammarParser.SELECTEDMEASUREFORMATSTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public SelectedMeasureFormatStringFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectedMeasureFormatStringFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectedMeasureFormatStringFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectedMeasureFormatStringFunctionContext selectedMeasureFormatStringFunction() {
		SelectedMeasureFormatStringFunctionContext _localctx = new SelectedMeasureFormatStringFunctionContext(Context, State);
		EnterRule(_localctx, 104, RULE_selectedMeasureFormatStringFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			Match(SELECTEDMEASUREFORMATSTRING_SYMBOL);
			State = 547;
			Match(OPAREN);
			State = 548;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectedMeasureNameFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTEDMEASURENAME_SYMBOL() { return GetToken(DAXGrammarParser.SELECTEDMEASURENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public SelectedMeasureNameFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectedMeasureNameFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectedMeasureNameFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectedMeasureNameFunctionContext selectedMeasureNameFunction() {
		SelectedMeasureNameFunctionContext _localctx = new SelectedMeasureNameFunctionContext(Context, State);
		EnterRule(_localctx, 106, RULE_selectedMeasureNameFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			Match(SELECTEDMEASURENAME_SYMBOL);
			State = 551;
			Match(OPAREN);
			State = 552;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserCultureFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USERCULTURE_SYMBOL() { return GetToken(DAXGrammarParser.USERCULTURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public UserCultureFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userCultureFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserCultureFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserCultureFunctionContext userCultureFunction() {
		UserCultureFunctionContext _localctx = new UserCultureFunctionContext(Context, State);
		EnterRule(_localctx, 108, RULE_userCultureFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(USERCULTURE_SYMBOL);
			State = 555;
			Match(OPAREN);
			State = 556;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserNameFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USERNAME_SYMBOL() { return GetToken(DAXGrammarParser.USERNAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public UserNameFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userNameFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserNameFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserNameFunctionContext userNameFunction() {
		UserNameFunctionContext _localctx = new UserNameFunctionContext(Context, State);
		EnterRule(_localctx, 110, RULE_userNameFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			Match(USERNAME_SYMBOL);
			State = 559;
			Match(OPAREN);
			State = 560;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserObjectIDFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USEROBJECTID_SYMBOL() { return GetToken(DAXGrammarParser.USEROBJECTID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public UserObjectIDFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userObjectIDFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserObjectIDFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserObjectIDFunctionContext userObjectIDFunction() {
		UserObjectIDFunctionContext _localctx = new UserObjectIDFunctionContext(Context, State);
		EnterRule(_localctx, 112, RULE_userObjectIDFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(USEROBJECTID_SYMBOL);
			State = 563;
			Match(OPAREN);
			State = 564;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserPrincipalNameFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USERPRINCIPALNAME_SYMBOL() { return GetToken(DAXGrammarParser.USERPRINCIPALNAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(DAXGrammarParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(DAXGrammarParser.CPAREN, 0); }
		public UserPrincipalNameFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userPrincipalNameFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserPrincipalNameFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserPrincipalNameFunctionContext userPrincipalNameFunction() {
		UserPrincipalNameFunctionContext _localctx = new UserPrincipalNameFunctionContext(Context, State);
		EnterRule(_localctx, 114, RULE_userPrincipalNameFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			Match(USERPRINCIPALNAME_SYMBOL);
			State = 567;
			Match(OPAREN);
			State = 568;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyColRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleColRefContext simpleColRef() {
			return GetRuleContext<SimpleColRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedColRefContext qualifiedColRef() {
			return GetRuleContext<QualifiedColRefContext>(0);
		}
		public AnyColRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyColRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyColRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyColRefContext anyColRef() {
		AnyColRefContext _localctx = new AnyColRefContext(Context, State);
		EnterRule(_localctx, 116, RULE_anyColRef);
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570;
				simpleColRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571;
				qualifiedColRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleColRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DAXGrammarParser.IDENTIFIER, 0); }
		public SimpleColRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleColRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleColRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleColRefContext simpleColRef() {
		SimpleColRefContext _localctx = new SimpleColRefContext(Context, State);
		EnterRule(_localctx, 118, RULE_simpleColRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedColRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DAXGrammarParser.IDENTIFIER, 0); }
		public QualifiedColRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedColRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedColRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedColRefContext qualifiedColRef() {
		QualifiedColRefContext _localctx = new QualifiedColRefContext(Context, State);
		EnterRule(_localctx, 120, RULE_qualifiedColRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DAXGrammarParser.IDENTIFIER, 0); }
		public TableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRefContext tableRef() {
		TableRefContext _localctx = new TableRefContext(Context, State);
		EnterRule(_localctx, 122, RULE_tableRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DAXGrammarParser.IDENTIFIER, 0); }
		public TableExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableExprContext tableExpr() {
		TableExprContext _localctx = new TableExprContext(Context, State);
		EnterRule(_localctx, 124, RULE_tableExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprOverTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DAXGrammarParser.IDENTIFIER, 0); }
		public ExprOverTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprOverTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOverTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprOverTableContext exprOverTable() {
		ExprOverTableContext _localctx = new ExprOverTableContext(Context, State);
		EnterRule(_localctx, 126, RULE_exprOverTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeasureRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DAXGrammarParser.IDENTIFIER, 0); }
		public MeasureRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_measureRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeasureRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeasureRefContext measureRef() {
		MeasureRefContext _localctx = new MeasureRefContext(Context, State);
		EnterRule(_localctx, 128, RULE_measureRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(DAXGrammarParser.BOOLEAN, 0); }
		public VariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantContext variant() {
		VariantContext _localctx = new VariantContext(Context, State);
		EnterRule(_localctx, 130, RULE_variant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortOrderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDERING() { return GetToken(DAXGrammarParser.ORDERING, 0); }
		public SortOrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortOrder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortOrderContext sortOrder() {
		SortOrderContext _localctx = new SortOrderContext(Context, State);
		EnterRule(_localctx, 132, RULE_sortOrder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			Match(ORDERING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DAXGrammarParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DAXGrammarParser.NUMBER, 0); }
		public ScalarValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarValueContext scalarValue() {
		ScalarValueContext _localctx = new ScalarValueContext(Context, State);
		EnterRule(_localctx, 134, RULE_scalarValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DAXGrammarParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DAXGrammarParser.NUMBER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 136, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeScalarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DAXGrammarParser.IDENTIFIER, 0); }
		public TypeScalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeScalar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeScalar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeScalarContext typeScalar() {
		TypeScalarContext _localctx = new TypeScalarContext(Context, State);
		EnterRule(_localctx, 138, RULE_typeScalar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithinTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DAXGrammarParser.STRING, 0); }
		public WithinTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withinText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithinText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithinTextContext withinText() {
		WithinTextContext _localctx = new WithinTextContext(Context, State);
		EnterRule(_localctx, 140, RULE_withinText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FindTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DAXGrammarParser.STRING, 0); }
		public FindTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_findText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDAXGrammarVisitor<TResult> typedVisitor = visitor as IDAXGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFindText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FindTextContext findText() {
		FindTextContext _localctx = new FindTextContext(Context, State);
		EnterRule(_localctx, 142, RULE_findText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '[', '\x25B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x98', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\xB0', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\xD2', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x103', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x11C', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x12C', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x134', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x144', 
		'\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x6', '\x1D', 
		'\x16C', '\n', '\x1D', '\r', '\x1D', '\xE', '\x1D', '\x16D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x6', '\x1E', '\x177', '\n', '\x1E', '\r', '\x1E', '\xE', 
		'\x1E', '\x178', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x1A0', 
		'\n', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x5', '$', '\x1A8', '\n', '$', '\a', '$', '\x1AA', '\n', 
		'$', '\f', '$', '\xE', '$', '\x1AD', '\v', '$', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1BA', '\n', '&', '\x3', 
		'&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x5', '*', '\x1D1', '\n', '*', '\x3', '*', 
		'\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x1F5', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x1FD', '\n', '\x30', '\a', 
		'\x30', '\x1FF', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x202', '\v', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x20B', '\n', '\x31', 
		'\f', '\x31', '\xE', '\x31', '\x20E', '\v', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x5', '<', '\x23F', 
		'\n', '<', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '?', 
		'\x3', '?', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x2', '\x2', 'J', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x2', '\x3', '\x4', '\x2', 
		'R', 'R', 'V', 'V', '\x2', '\x258', '\x2', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x97', '\x3', '\x2', '\x2', '\x2', '\x6', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\xD1', '\x3', '\x2', '\x2', '\x2', '\n', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x10', '\xE2', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x14', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xFF', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x106', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x117', '\x3', '\x2', '\x2', '\x2', '$', '\x11F', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x124', '\x3', '\x2', '\x2', '\x2', '(', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x137', '\x3', '\x2', '\x2', '\x2', 
		',', '\x13C', '\x3', '\x2', '\x2', '\x2', '.', '\x147', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x32', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x38', '\x163', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x171', '\x3', '\x2', '\x2', '\x2', '<', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x42', '\x18E', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x193', '\x3', '\x2', '\x2', '\x2', '\x46', '\x198', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x1B0', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x1B5', '\x3', '\x2', '\x2', '\x2', 'L', '\x1BD', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x1C2', '\x3', '\x2', '\x2', '\x2', 'P', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x1D4', '\x3', '\x2', '\x2', '\x2', 'V', '\x1D9', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x1DE', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x1E8', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x1ED', '\x3', '\x2', '\x2', '\x2', '`', '\x205', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x211', '\x3', '\x2', '\x2', '\x2', '\x64', '\x216', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x220', '\x3', '\x2', '\x2', '\x2', 'j', '\x224', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x228', '\x3', '\x2', '\x2', '\x2', 'n', '\x22C', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x230', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x234', '\x3', '\x2', '\x2', '\x2', 't', '\x238', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x23E', '\x3', '\x2', '\x2', '\x2', 'x', '\x240', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x242', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x244', '\x3', '\x2', '\x2', '\x2', '~', '\x246', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x248', '\x3', '\x2', '\x2', '\x2', '\x82', '\x24A', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x88', '\x250', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x252', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x254', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x256', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x258', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x5', '\x4', 
		'\x3', '\x2', '\x93', '\x94', '\a', '\x2', '\x2', '\x3', '\x94', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x98', '\x5', '\x6', '\x4', '\x2', 
		'\x96', '\x98', '\x5', '\b', '\x5', '\x2', '\x97', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\xB0', '\x5', '\n', '\x6', '\x2', 
		'\x9A', '\xB0', '\x5', '\f', '\a', '\x2', '\x9B', '\xB0', '\x5', '\xE', 
		'\b', '\x2', '\x9C', '\xB0', '\x5', '\x10', '\t', '\x2', '\x9D', '\xB0', 
		'\x5', '\x12', '\n', '\x2', '\x9E', '\xB0', '\x5', '\x14', '\v', '\x2', 
		'\x9F', '\xB0', '\x5', '\x16', '\f', '\x2', '\xA0', '\xB0', '\x5', '\x18', 
		'\r', '\x2', '\xA1', '\xB0', '\x5', '\x1A', '\xE', '\x2', '\xA2', '\xB0', 
		'\x5', '\x1C', '\xF', '\x2', '\xA3', '\xB0', '\x5', '\x1E', '\x10', '\x2', 
		'\xA4', '\xB0', '\x5', ' ', '\x11', '\x2', '\xA5', '\xB0', '\x5', '\"', 
		'\x12', '\x2', '\xA6', '\xB0', '\x5', '$', '\x13', '\x2', '\xA7', '\xB0', 
		'\x5', '&', '\x14', '\x2', '\xA8', '\xB0', '\x5', '(', '\x15', '\x2', 
		'\xA9', '\xB0', '\x5', '*', '\x16', '\x2', '\xAA', '\xB0', '\x5', ',', 
		'\x17', '\x2', '\xAB', '\xB0', '\x5', '.', '\x18', '\x2', '\xAC', '\xB0', 
		'\x5', '\x30', '\x19', '\x2', '\xAD', '\xB0', '\x5', '\x32', '\x1A', '\x2', 
		'\xAE', '\xB0', '\x5', '\x34', '\x1B', '\x2', '\xAF', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xAF', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xAF', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xD2', '\x5', '\x36', '\x1C', '\x2', 
		'\xB2', '\xD2', '\x5', '\x38', '\x1D', '\x2', '\xB3', '\xD2', '\x5', ':', 
		'\x1E', '\x2', '\xB4', '\xD2', '\x5', '<', '\x1F', '\x2', '\xB5', '\xD2', 
		'\x5', '>', ' ', '\x2', '\xB6', '\xD2', '\x5', '@', '!', '\x2', '\xB7', 
		'\xD2', '\x5', '\x42', '\"', '\x2', '\xB8', '\xD2', '\x5', '\x44', '#', 
		'\x2', '\xB9', '\xD2', '\x5', '\x46', '$', '\x2', '\xBA', '\xD2', '\x5', 
		'H', '%', '\x2', '\xBB', '\xD2', '\x5', 'J', '&', '\x2', '\xBC', '\xD2', 
		'\x5', 'L', '\'', '\x2', '\xBD', '\xD2', '\x5', 'N', '(', '\x2', '\xBE', 
		'\xD2', '\x5', 'P', ')', '\x2', '\xBF', '\xD2', '\x5', 'R', '*', '\x2', 
		'\xC0', '\xD2', '\x5', 'T', '+', '\x2', '\xC1', '\xD2', '\x5', 'V', ',', 
		'\x2', '\xC2', '\xD2', '\x5', 'X', '-', '\x2', '\xC3', '\xD2', '\x5', 
		'Z', '.', '\x2', '\xC4', '\xD2', '\x5', '\\', '/', '\x2', '\xC5', '\xD2', 
		'\x5', '^', '\x30', '\x2', '\xC6', '\xD2', '\x5', '`', '\x31', '\x2', 
		'\xC7', '\xD2', '\x5', '\x62', '\x32', '\x2', '\xC8', '\xD2', '\x5', '\x64', 
		'\x33', '\x2', '\xC9', '\xD2', '\x5', '\x66', '\x34', '\x2', '\xCA', '\xD2', 
		'\x5', 'h', '\x35', '\x2', '\xCB', '\xD2', '\x5', 'j', '\x36', '\x2', 
		'\xCC', '\xD2', '\x5', 'l', '\x37', '\x2', '\xCD', '\xD2', '\x5', 'n', 
		'\x38', '\x2', '\xCE', '\xD2', '\x5', 'p', '\x39', '\x2', '\xCF', '\xD2', 
		'\x5', 'r', ':', '\x2', '\xD0', '\xD2', '\x5', 't', ';', '\x2', '\xD1', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\t', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', 
		'\x1A', '\x2', '\x2', '\xD4', '\xD5', '\a', '\x13', '\x2', '\x2', '\xD5', 
		'\xD6', '\x5', 'v', '<', '\x2', '\xD6', '\xD7', '\a', '\x14', '\x2', '\x2', 
		'\xD7', '\v', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '\x1B', 
		'\x2', '\x2', '\xD9', '\xDA', '\a', '\x13', '\x2', '\x2', '\xDA', '\xDB', 
		'\x5', 'v', '<', '\x2', '\xDB', '\xDC', '\a', '\x14', '\x2', '\x2', '\xDC', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '\x1C', '\x2', 
		'\x2', '\xDE', '\xDF', '\a', '\x13', '\x2', '\x2', '\xDF', '\xE0', '\x5', 
		'v', '<', '\x2', '\xE0', '\xE1', '\a', '\x14', '\x2', '\x2', '\xE1', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', '\x1D', '\x2', '\x2', 
		'\xE3', '\xE4', '\a', '\x13', '\x2', '\x2', '\xE4', '\xE5', '\x5', '~', 
		'@', '\x2', '\xE5', '\xE6', '\a', '\x17', '\x2', '\x2', '\xE6', '\xE7', 
		'\x5', '\x80', '\x41', '\x2', '\xE7', '\xE8', '\a', '\x14', '\x2', '\x2', 
		'\xE8', '\x11', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\a', '\x1E', 
		'\x2', '\x2', '\xEA', '\xEB', '\a', '\x13', '\x2', '\x2', '\xEB', '\xEC', 
		'\x5', 'v', '<', '\x2', '\xEC', '\xED', '\a', '\x14', '\x2', '\x2', '\xED', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\a', '\x1F', '\x2', 
		'\x2', '\xEF', '\xF0', '\a', '\x13', '\x2', '\x2', '\xF0', '\xF1', '\x5', 
		'v', '<', '\x2', '\xF1', '\xF2', '\a', '\x14', '\x2', '\x2', '\xF2', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\a', ' ', '\x2', '\x2', '\xF4', 
		'\xF5', '\a', '\x13', '\x2', '\x2', '\xF5', '\xF6', '\x5', '~', '@', '\x2', 
		'\xF6', '\xF7', '\a', '\x17', '\x2', '\x2', '\xF7', '\xF8', '\x5', '\x80', 
		'\x41', '\x2', '\xF8', '\xF9', '\a', '\x14', '\x2', '\x2', '\xF9', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\a', '!', '\x2', '\x2', '\xFB', 
		'\xFC', '\a', '\x13', '\x2', '\x2', '\xFC', '\xFD', '\x5', 'v', '<', '\x2', 
		'\xFD', '\xFE', '\a', '\x14', '\x2', '\x2', '\xFE', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\x100', '\a', '\"', '\x2', '\x2', '\x100', '\x102', 
		'\a', '\x13', '\x2', '\x2', '\x101', '\x103', '\x5', '~', '@', '\x2', 
		'\x102', '\x101', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x105', '\a', '\x14', '\x2', '\x2', '\x105', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\a', '#', '\x2', '\x2', '\x107', '\x108', '\a', 
		'\x13', '\x2', '\x2', '\x108', '\x109', '\x5', '~', '@', '\x2', '\x109', 
		'\x10A', '\a', '\x17', '\x2', '\x2', '\x10A', '\x10B', '\x5', '\x80', 
		'\x41', '\x2', '\x10B', '\x10C', '\a', '\x14', '\x2', '\x2', '\x10C', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', '$', '\x2', 
		'\x2', '\x10E', '\x10F', '\a', '\x13', '\x2', '\x2', '\x10F', '\x110', 
		'\x5', 'v', '<', '\x2', '\x110', '\x111', '\a', '\x14', '\x2', '\x2', 
		'\x111', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\a', '%', 
		'\x2', '\x2', '\x113', '\x114', '\a', '\x13', '\x2', '\x2', '\x114', '\x115', 
		'\x5', 'v', '<', '\x2', '\x115', '\x116', '\a', '\x14', '\x2', '\x2', 
		'\x116', '!', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\a', '&', 
		'\x2', '\x2', '\x118', '\x11B', '\a', '\x13', '\x2', '\x2', '\x119', '\x11C', 
		'\x5', 'v', '<', '\x2', '\x11A', '\x11C', '\x5', '\x8C', 'G', '\x2', '\x11B', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', 
		'\a', '\x14', '\x2', '\x2', '\x11E', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x120', '\a', '\'', '\x2', '\x2', '\x120', '\x121', '\a', '\x13', 
		'\x2', '\x2', '\x121', '\x122', '\x5', 'v', '<', '\x2', '\x122', '\x123', 
		'\a', '\x14', '\x2', '\x2', '\x123', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x125', '\a', '(', '\x2', '\x2', '\x125', '\x126', '\a', '\x13', 
		'\x2', '\x2', '\x126', '\x127', '\x5', '~', '@', '\x2', '\x127', '\x128', 
		'\a', '\x17', '\x2', '\x2', '\x128', '\x12B', '\x5', '\x80', '\x41', '\x2', 
		'\x129', '\x12A', '\a', '\x17', '\x2', '\x2', '\x12A', '\x12C', '\x5', 
		'\x84', '\x43', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x12E', '\a', '\x14', '\x2', '\x2', '\x12E', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x130', '\a', ')', '\x2', '\x2', '\x130', 
		'\x133', '\a', '\x13', '\x2', '\x2', '\x131', '\x134', '\x5', 'v', '<', 
		'\x2', '\x132', '\x134', '\x5', '\x8C', 'G', '\x2', '\x133', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\a', 
		'\x14', '\x2', '\x2', '\x136', ')', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x138', '\a', '*', '\x2', '\x2', '\x138', '\x139', '\a', '\x13', '\x2', 
		'\x2', '\x139', '\x13A', '\x5', 'v', '<', '\x2', '\x13A', '\x13B', '\a', 
		'\x14', '\x2', '\x2', '\x13B', '+', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13D', '\a', '+', '\x2', '\x2', '\x13D', '\x13E', '\a', '\x13', '\x2', 
		'\x2', '\x13E', '\x13F', '\x5', '~', '@', '\x2', '\x13F', '\x140', '\a', 
		'\x17', '\x2', '\x2', '\x140', '\x143', '\x5', '\x80', '\x41', '\x2', 
		'\x141', '\x142', '\a', '\x17', '\x2', '\x2', '\x142', '\x144', '\x5', 
		'\x84', '\x43', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x146', '\a', '\x14', '\x2', '\x2', '\x146', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x148', '\a', ',', '\x2', '\x2', '\x148', 
		'\x149', '\a', '\x13', '\x2', '\x2', '\x149', '\x14A', '\x5', 'v', '<', 
		'\x2', '\x14A', '\x14B', '\a', '\x14', '\x2', '\x2', '\x14B', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x14D', '\a', '-', '\x2', '\x2', '\x14D', 
		'\x14E', '\a', '\x13', '\x2', '\x2', '\x14E', '\x14F', '\x5', '~', '@', 
		'\x2', '\x14F', '\x150', '\a', '\x17', '\x2', '\x2', '\x150', '\x151', 
		'\x5', '\x80', '\x41', '\x2', '\x151', '\x152', '\a', '\x14', '\x2', '\x2', 
		'\x152', '\x31', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\a', '.', 
		'\x2', '\x2', '\x154', '\x155', '\a', '\x13', '\x2', '\x2', '\x155', '\x156', 
		'\x5', 'v', '<', '\x2', '\x156', '\x157', '\a', '\x14', '\x2', '\x2', 
		'\x157', '\x33', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\a', '/', 
		'\x2', '\x2', '\x159', '\x15A', '\a', '\x13', '\x2', '\x2', '\x15A', '\x15B', 
		'\x5', '~', '@', '\x2', '\x15B', '\x15C', '\a', '\x17', '\x2', '\x2', 
		'\x15C', '\x15D', '\x5', '\x80', '\x41', '\x2', '\x15D', '\x15E', '\a', 
		'\x14', '\x2', '\x2', '\x15E', '\x35', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x160', '\a', '\x30', '\x2', '\x2', '\x160', '\x161', '\a', '\x13', '\x2', 
		'\x2', '\x161', '\x162', '\a', '\x14', '\x2', '\x2', '\x162', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\a', '\x31', '\x2', '\x2', 
		'\x164', '\x165', '\a', '\x13', '\x2', '\x2', '\x165', '\x16B', '\x5', 
		'~', '@', '\x2', '\x166', '\x167', '\a', '\x17', '\x2', '\x2', '\x167', 
		'\x168', '\x5', 'v', '<', '\x2', '\x168', '\x169', '\a', '\x17', '\x2', 
		'\x2', '\x169', '\x16A', '\x5', '\x88', '\x45', '\x2', '\x16A', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16B', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16B', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', '\a', '\x14', '\x2', 
		'\x2', '\x170', '\x39', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', 
		'\a', '\x32', '\x2', '\x2', '\x172', '\x173', '\a', '\x13', '\x2', '\x2', 
		'\x173', '\x176', '\x5', '~', '@', '\x2', '\x174', '\x175', '\a', '\x17', 
		'\x2', '\x2', '\x175', '\x177', '\x5', '\x88', '\x45', '\x2', '\x176', 
		'\x174', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '\x176', '\x3', '\x2', '\x2', '\x2', '\x178', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x17A', '\x17B', '\a', '\x14', '\x2', '\x2', '\x17B', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x17C', '\x17D', '\a', '\x33', '\x2', '\x2', '\x17D', '\x17E', 
		'\a', '\x13', '\x2', '\x2', '\x17E', '\x17F', '\x5', '\x8E', 'H', '\x2', 
		'\x17F', '\x180', '\a', '\x17', '\x2', '\x2', '\x180', '\x181', '\x5', 
		'\x90', 'I', '\x2', '\x181', '\x182', '\a', '\x14', '\x2', '\x2', '\x182', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x183', '\x184', '\a', '\x34', '\x2', 
		'\x2', '\x184', '\x185', '\a', '\x13', '\x2', '\x2', '\x185', '\x186', 
		'\x5', '\x8E', 'H', '\x2', '\x186', '\x187', '\a', '\x17', '\x2', '\x2', 
		'\x187', '\x188', '\x5', '\x90', 'I', '\x2', '\x188', '\x189', '\a', '\x14', 
		'\x2', '\x2', '\x189', '?', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', 
		'\a', '\x35', '\x2', '\x2', '\x18B', '\x18C', '\a', '\x13', '\x2', '\x2', 
		'\x18C', '\x18D', '\a', '\x14', '\x2', '\x2', '\x18D', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x18E', '\x18F', '\a', '\x36', '\x2', '\x2', '\x18F', 
		'\x190', '\a', '\x13', '\x2', '\x2', '\x190', '\x191', '\x5', 'v', '<', 
		'\x2', '\x191', '\x192', '\a', '\x14', '\x2', '\x2', '\x192', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x194', '\a', '\x37', '\x2', '\x2', 
		'\x194', '\x195', '\a', '\x13', '\x2', '\x2', '\x195', '\x196', '\x5', 
		'z', '>', '\x2', '\x196', '\x197', '\a', '\x14', '\x2', '\x2', '\x197', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\a', '\x38', '\x2', 
		'\x2', '\x199', '\x19A', '\a', '\x13', '\x2', '\x2', '\x19A', '\x19B', 
		'\x5', '\x88', '\x45', '\x2', '\x19B', '\x19C', '\a', '\x17', '\x2', '\x2', 
		'\x19C', '\x19F', '\x5', '\x88', '\x45', '\x2', '\x19D', '\x19E', '\a', 
		'\x17', '\x2', '\x2', '\x19E', '\x1A0', '\x5', '\x86', '\x44', '\x2', 
		'\x19F', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\x3', 
		'\x2', '\x2', '\x2', '\x1A0', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1A1', 
		'\x1A2', '\a', '\x17', '\x2', '\x2', '\x1A2', '\x1A3', '\x5', '\x88', 
		'\x45', '\x2', '\x1A3', '\x1A4', '\a', '\x17', '\x2', '\x2', '\x1A4', 
		'\x1A7', '\x5', '\x88', '\x45', '\x2', '\x1A5', '\x1A6', '\a', '\x17', 
		'\x2', '\x2', '\x1A6', '\x1A8', '\x5', '\x86', '\x44', '\x2', '\x1A7', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1AC', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AD', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\a', '\x14', '\x2', 
		'\x2', '\x1AF', 'G', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\a', 
		'\x39', '\x2', '\x2', '\x1B1', '\x1B2', '\a', '\x13', '\x2', '\x2', '\x1B2', 
		'\x1B3', '\x5', '\x8A', '\x46', '\x2', '\x1B3', '\x1B4', '\a', '\x14', 
		'\x2', '\x2', '\x1B4', 'I', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', 
		'\a', ':', '\x2', '\x2', '\x1B6', '\x1B9', '\a', '\x13', '\x2', '\x2', 
		'\x1B7', '\x1BA', '\x5', '|', '?', '\x2', '\x1B8', '\x1BA', '\x5', 'v', 
		'<', '\x2', '\x1B9', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', '\x1BC', '\a', '\x14', '\x2', '\x2', '\x1BC', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD', '\x1BE', '\a', ';', '\x2', '\x2', '\x1BE', '\x1BF', 
		'\a', '\x13', '\x2', '\x2', '\x1BF', '\x1C0', '\x5', '~', '@', '\x2', 
		'\x1C0', '\x1C1', '\a', '\x14', '\x2', '\x2', '\x1C1', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2', '\x1C3', '\a', '<', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\a', '\x13', '\x2', '\x2', '\x1C4', '\x1C5', '\x5', '\x8A', '\x46', '\x2', 
		'\x1C5', '\x1C6', '\a', '\x14', '\x2', '\x2', '\x1C6', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x1C7', '\x1C8', '\a', '=', '\x2', '\x2', '\x1C8', '\x1C9', 
		'\a', '\x13', '\x2', '\x2', '\x1C9', '\x1CA', '\x5', '\x8A', '\x46', '\x2', 
		'\x1CA', '\x1CB', '\a', '\x14', '\x2', '\x2', '\x1CB', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x1CC', '\x1CD', '\a', '>', '\x2', '\x2', '\x1CD', '\x1D0', 
		'\a', '\x13', '\x2', '\x2', '\x1CE', '\x1D1', '\x5', '|', '?', '\x2', 
		'\x1CF', '\x1D1', '\x5', 'v', '<', '\x2', '\x1D0', '\x1CE', '\x3', '\x2', 
		'\x2', '\x2', '\x1D0', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\a', '\x14', '\x2', '\x2', 
		'\x1D3', 'S', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\a', '?', 
		'\x2', '\x2', '\x1D5', '\x1D6', '\a', '\x13', '\x2', '\x2', '\x1D6', '\x1D7', 
		'\x5', 'v', '<', '\x2', '\x1D7', '\x1D8', '\a', '\x14', '\x2', '\x2', 
		'\x1D8', 'U', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\a', '@', 
		'\x2', '\x2', '\x1DA', '\x1DB', '\a', '\x13', '\x2', '\x2', '\x1DB', '\x1DC', 
		'\x5', '\x8A', '\x46', '\x2', '\x1DC', '\x1DD', '\a', '\x14', '\x2', '\x2', 
		'\x1DD', 'W', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\a', '\x41', 
		'\x2', '\x2', '\x1DF', '\x1E0', '\a', '\x13', '\x2', '\x2', '\x1E0', '\x1E1', 
		'\x5', '\x8A', '\x46', '\x2', '\x1E1', '\x1E2', '\a', '\x14', '\x2', '\x2', 
		'\x1E2', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\a', '\x42', 
		'\x2', '\x2', '\x1E4', '\x1E5', '\a', '\x13', '\x2', '\x2', '\x1E5', '\x1E6', 
		'\x5', '\x8A', '\x46', '\x2', '\x1E6', '\x1E7', '\a', '\x14', '\x2', '\x2', 
		'\x1E7', '[', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\a', '\x43', 
		'\x2', '\x2', '\x1E9', '\x1EA', '\a', '\x13', '\x2', '\x2', '\x1EA', '\x1EB', 
		'\x5', '\x8A', '\x46', '\x2', '\x1EB', '\x1EC', '\a', '\x14', '\x2', '\x2', 
		'\x1EC', ']', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\a', '\x44', 
		'\x2', '\x2', '\x1EE', '\x1EF', '\a', '\x13', '\x2', '\x2', '\x1EF', '\x1F0', 
		'\x5', '\x88', '\x45', '\x2', '\x1F0', '\x1F1', '\a', '\x17', '\x2', '\x2', 
		'\x1F1', '\x1F4', '\x5', '\x88', '\x45', '\x2', '\x1F2', '\x1F3', '\a', 
		'\x17', '\x2', '\x2', '\x1F3', '\x1F5', '\x5', '\x86', '\x44', '\x2', 
		'\x1F4', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\x1F5', '\x200', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x1F7', '\a', '\x17', '\x2', '\x2', '\x1F7', '\x1F8', '\x5', '\x88', 
		'\x45', '\x2', '\x1F8', '\x1F9', '\a', '\x17', '\x2', '\x2', '\x1F9', 
		'\x1FC', '\x5', '\x88', '\x45', '\x2', '\x1FA', '\x1FB', '\a', '\x17', 
		'\x2', '\x2', '\x1FB', '\x1FD', '\x5', '\x86', '\x44', '\x2', '\x1FC', 
		'\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FD', '\x3', '\x2', '\x2', 
		'\x2', '\x1FD', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1F6', 
		'\x3', '\x2', '\x2', '\x2', '\x1FF', '\x202', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x200', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x201', '\x203', '\x3', '\x2', '\x2', '\x2', '\x202', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\a', '\x14', '\x2', 
		'\x2', '\x204', '_', '\x3', '\x2', '\x2', '\x2', '\x205', '\x206', '\a', 
		'\x45', '\x2', '\x2', '\x206', '\x207', '\a', '\x13', '\x2', '\x2', '\x207', 
		'\x20C', '\x5', '\x82', '\x42', '\x2', '\x208', '\x209', '\a', '\x17', 
		'\x2', '\x2', '\x209', '\x20B', '\x5', '\x82', '\x42', '\x2', '\x20A', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20E', '\x3', '\x2', '\x2', 
		'\x2', '\x20C', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', 
		'\x3', '\x2', '\x2', '\x2', '\x20D', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', '\a', 
		'\x14', '\x2', '\x2', '\x210', '\x61', '\x3', '\x2', '\x2', '\x2', '\x211', 
		'\x212', '\a', '\x46', '\x2', '\x2', '\x212', '\x213', '\a', '\x13', '\x2', 
		'\x2', '\x213', '\x214', '\x5', 'v', '<', '\x2', '\x214', '\x215', '\a', 
		'\x14', '\x2', '\x2', '\x215', '\x63', '\x3', '\x2', '\x2', '\x2', '\x216', 
		'\x217', '\a', 'G', '\x2', '\x2', '\x217', '\x218', '\a', '\x13', '\x2', 
		'\x2', '\x218', '\x219', '\x5', '\x8A', '\x46', '\x2', '\x219', '\x21A', 
		'\a', '\x14', '\x2', '\x2', '\x21A', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x21C', '\a', 'H', '\x2', '\x2', '\x21C', '\x21D', '\a', '\x13', 
		'\x2', '\x2', '\x21D', '\x21E', '\x5', '~', '@', '\x2', '\x21E', '\x21F', 
		'\a', '\x14', '\x2', '\x2', '\x21F', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x220', '\x221', '\a', 'I', '\x2', '\x2', '\x221', '\x222', '\a', '\x13', 
		'\x2', '\x2', '\x222', '\x223', '\a', '\x14', '\x2', '\x2', '\x223', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\a', 'J', '\x2', '\x2', 
		'\x225', '\x226', '\a', '\x13', '\x2', '\x2', '\x226', '\x227', '\a', 
		'\x14', '\x2', '\x2', '\x227', 'k', '\x3', '\x2', '\x2', '\x2', '\x228', 
		'\x229', '\a', 'K', '\x2', '\x2', '\x229', '\x22A', '\a', '\x13', '\x2', 
		'\x2', '\x22A', '\x22B', '\a', '\x14', '\x2', '\x2', '\x22B', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x22D', '\a', 'L', '\x2', '\x2', '\x22D', 
		'\x22E', '\a', '\x13', '\x2', '\x2', '\x22E', '\x22F', '\a', '\x14', '\x2', 
		'\x2', '\x22F', 'o', '\x3', '\x2', '\x2', '\x2', '\x230', '\x231', '\a', 
		'M', '\x2', '\x2', '\x231', '\x232', '\a', '\x13', '\x2', '\x2', '\x232', 
		'\x233', '\a', '\x14', '\x2', '\x2', '\x233', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x234', '\x235', '\a', 'N', '\x2', '\x2', '\x235', '\x236', '\a', 
		'\x13', '\x2', '\x2', '\x236', '\x237', '\a', '\x14', '\x2', '\x2', '\x237', 
		's', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\a', 'O', '\x2', '\x2', 
		'\x239', '\x23A', '\a', '\x13', '\x2', '\x2', '\x23A', '\x23B', '\a', 
		'\x14', '\x2', '\x2', '\x23B', 'u', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x23F', '\x5', 'x', '=', '\x2', '\x23D', '\x23F', '\x5', 'z', '>', '\x2', 
		'\x23E', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x23D', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', 'w', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x241', '\a', 'V', '\x2', '\x2', '\x241', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x242', '\x243', '\a', 'V', '\x2', '\x2', '\x243', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x244', '\x245', '\a', 'V', '\x2', '\x2', '\x245', '}', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x247', '\a', 'V', '\x2', '\x2', 
		'\x247', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\a', 'V', 
		'\x2', '\x2', '\x249', '\x81', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', 
		'\a', 'V', '\x2', '\x2', '\x24B', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x24D', '\a', '\x18', '\x2', '\x2', '\x24D', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x24E', '\x24F', '\a', '\x19', '\x2', '\x2', '\x24F', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x250', '\x251', '\t', '\x2', '\x2', 
		'\x2', '\x251', '\x89', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', 
		'\t', '\x2', '\x2', '\x2', '\x253', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x255', '\a', 'V', '\x2', '\x2', '\x255', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x256', '\x257', '\a', 'Q', '\x2', '\x2', '\x257', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x258', '\x259', '\a', 'Q', '\x2', '\x2', 
		'\x259', '\x91', '\x3', '\x2', '\x2', '\x2', '\x16', '\x97', '\xAF', '\xD1', 
		'\x102', '\x11B', '\x12B', '\x133', '\x143', '\x16D', '\x178', '\x19F', 
		'\x1A7', '\x1AB', '\x1B9', '\x1D0', '\x1F4', '\x1FC', '\x200', '\x20C', 
		'\x23E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
